# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class CreateAgentTextAssetResponseDataProcessingInfo(UniversalBaseModel):
    """
    Processing details and configuration
    """

    chunk_size: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="chunkSize")] = pydantic.Field(
        default=None
    )
    """
    Target chunk size used for segmentation
    """

    embedding_model: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="embeddingModel")] = (
        pydantic.Field(default=None)
    )
    """
    AI model used for vector embeddings
    """

    processing_time: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="processingTime")] = (
        pydantic.Field(default=None)
    )
    """
    Processing time in seconds
    """

    structure_detected: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="structureDetected")] = (
        pydantic.Field(default=None)
    )
    """
    Whether document structure (headings, Q&A) was detected
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
