# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .search_agent_assets_response_data_results_item import SearchAgentAssetsResponseDataResultsItem
from .search_agent_assets_response_data_search_config import SearchAgentAssetsResponseDataSearchConfig


class SearchAgentAssetsResponseData(UniversalBaseModel):
    query: typing.Optional[str] = pydantic.Field(default=None)
    """
    The search query that was executed
    """

    results: typing.Optional[typing.List[SearchAgentAssetsResponseDataResultsItem]] = None
    count: typing.Optional[int] = pydantic.Field(default=None)
    """
    Number of results returned
    """

    search_config: typing_extensions.Annotated[
        typing.Optional[SearchAgentAssetsResponseDataSearchConfig], FieldMetadata(alias="searchConfig")
    ] = pydantic.Field(default=None)
    """
    Search configuration used
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
