# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class AssetConfigurationFileProcessing(UniversalBaseModel):
    max_file_size: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="maxFileSize")] = (
        pydantic.Field(default=None)
    )
    """
    Maximum file size in bytes
    """

    max_file_size_mb: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="maxFileSizeMB")] = (
        pydantic.Field(default=None)
    )
    """
    Maximum file size in megabytes
    """

    allowed_file_types: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="allowedFileTypes")
    ] = pydantic.Field(default=None)
    """
    Supported file extensions
    """

    temp_dir: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="tempDir")] = pydantic.Field(
        default=None
    )
    """
    Temporary directory for file processing
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
