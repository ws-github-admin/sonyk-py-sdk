# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .agent_configuration_tts_model import AgentConfigurationTtsModel
from .agent_configuration_tts_provider import AgentConfigurationTtsProvider


class AgentConfigurationTts(UniversalBaseModel):
    """
    Text-to-Speech configuration that controls how the agent's voice sounds.
    This determines the personality and quality of the agent's speech.
    """

    model: AgentConfigurationTtsModel = pydantic.Field()
    """
    TTS model/engine quality:
    - **Eleven-turbo-v2-5**: Latest, highest quality (recommended)
    - **Eleven-turbo-v2**: Fast and good quality
    - **Eleven-multilingual-v2**: For multiple languages
    """

    voice_id: typing_extensions.Annotated[str, FieldMetadata(alias="voiceId")] = pydantic.Field()
    """
    Specific voice personality. Each voice has different characteristics:
    
    **Popular ElevenLabs Voices:**
    - **EXAVITQu4vr4xnSDxMaL**: Professional female voice (Sarah)
    - **ErXwobaYiN019PkySvjV**: Friendly male voice (Antoni)
    - **VR6AewLTigWG4xSOukaG**: Energetic female voice (Domi)
    - **pNInz6obpgDQGcFmaJgB**: Calm male voice (Adam)
    
    You can test voices at elevenlabs.io/voice-library
    """

    provider: AgentConfigurationTtsProvider = pydantic.Field()
    """
    Text-to-speech service provider
    """

    stability: typing.Optional[float] = pydantic.Field(default=None)
    """
    Voice consistency (ElevenLabs specific):
    - **0.0**: More variable, expressive
    - **0.5**: Balanced (recommended)
    - **1.0**: Very consistent, stable
    """

    similarity_boost: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="similarityBoost")] = (
        pydantic.Field(default=None)
    )
    """
    Voice clarity enhancement (ElevenLabs specific):
    - **0.0**: More natural variation
    - **0.75**: Good clarity (recommended)
    - **1.0**: Maximum clarity
    """

    speed: typing.Optional[float] = pydantic.Field(default=None)
    """
    Speech speed multiplier:
    - **0.8**: Slower, more deliberate
    - **1.0**: Normal speed (recommended)
    - **1.2**: Faster, more energetic
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
