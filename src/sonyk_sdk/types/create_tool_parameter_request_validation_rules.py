# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class CreateToolParameterRequestValidationRules(UniversalBaseModel):
    """
    Optional validation rules for the parameter
    """

    min: typing.Optional[float] = pydantic.Field(default=None)
    """
    Minimum value (for numbers) or length (for strings)
    """

    max: typing.Optional[float] = pydantic.Field(default=None)
    """
    Maximum value (for numbers) or length (for strings)
    """

    pattern: typing.Optional[str] = pydantic.Field(default=None)
    """
    Regular expression pattern for string validation
    """

    enum: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    List of allowed values
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
