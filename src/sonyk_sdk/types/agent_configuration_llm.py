# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .agent_configuration_llm_model import AgentConfigurationLlmModel
from .agent_configuration_llm_provider import AgentConfigurationLlmProvider


class AgentConfigurationLlm(UniversalBaseModel):
    """
    Large Language Model configuration that powers the agent's conversational abilities.
    This is the "brain" of your agent that processes user input and generates responses.
    """

    model: AgentConfigurationLlmModel = pydantic.Field()
    """
    Specific AI model to use. Each model has different capabilities:
    - **gpt-4o**: Most capable, best for complex reasoning
    - **gpt-4o-mini**: Fast and cost-effective, good for most use cases
    - **claude-3-sonnet**: Excellent for detailed, nuanced conversations
    - **gemini-pro**: Good balance of speed and capability
    """

    provider: AgentConfigurationLlmProvider = pydantic.Field()
    """
    AI service provider
    """

    system_prompt: typing_extensions.Annotated[str, FieldMetadata(alias="systemPrompt")] = pydantic.Field()
    """
    **Most Important Setting**: This defines your agent's personality, knowledge, and behavior.
    
    Write this as detailed instructions that include:
    - **Role**: Who is the agent? (receptionist, support agent, etc.)
    - **Personality**: Friendly, professional, casual, etc.
    - **Knowledge**: What does the agent know about?
    - **Tasks**: What can the agent help with?
    - **Guidelines**: How should it behave in different situations?
    
    **Example**: "You are Georgia, a friendly restaurant receptionist. Help customers make reservations, answer questions about menu and hours. Always be polite and confirm details."
    """

    temperature: typing.Optional[float] = pydantic.Field(default=None)
    """
    Controls creativity vs consistency in responses:
    - **0.0**: Very consistent, predictable responses
    - **0.7**: Good balance (recommended)
    - **1.5+**: More creative but less predictable
    """

    max_tokens: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="maxTokens")] = pydantic.Field(
        default=None
    )
    """
    Maximum length of agent responses (roughly 4 characters per token)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
