# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .agent_configuration_stt_model import AgentConfigurationSttModel
from .agent_configuration_stt_provider import AgentConfigurationSttProvider


class AgentConfigurationStt(UniversalBaseModel):
    """
    Speech-to-Text configuration that converts caller voice to text.
    This determines how accurately the agent understands what callers say.
    """

    model: AgentConfigurationSttModel = pydantic.Field()
    """
    STT model quality and speed:
    - **nova-3**: Latest, most accurate (recommended)
    - **nova-2**: Good balance of speed and accuracy
    - **base**: Faster but less accurate
    """

    provider: AgentConfigurationSttProvider = pydantic.Field()
    """
    Speech recognition service provider
    """

    language: typing.Optional[str] = pydantic.Field(default=None)
    """
    Language code for speech recognition:
    - **en**: English
    - **es**: Spanish
    - **fr**: French
    - **de**: German
    And many more...
    """

    punctuate: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Automatically add punctuation to transcripts
    """

    profanity_filter: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="profanityFilter")] = (
        pydantic.Field(default=None)
    )
    """
    Filter profanity from transcripts
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
